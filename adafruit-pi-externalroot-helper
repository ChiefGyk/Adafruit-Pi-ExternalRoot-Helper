#!/usr/bin/env bash

set -e

function print_version() {
    echo "Adafruit Pi External Root Helper v0.0.1"
    exit 1
}

function print_help() {
    echo "Usage: $0 -d [target device]"
    echo "    -h            Print this help"
    echo "    -v            Print version information"
    echo "    -d [device]   Specify path of device to convert to root"
    echo
    echo "You must specify a device."
    exit 1
}

function bail() {
    FG="1;31m"
    BG="40m"
    echo -en "[\033[${FG}\033[${BG}${group}\033[0m] "
    if [ -z "$1" ]; then
        echo "Exiting due to error"
    else
        echo "Exiting due to error: $*"
    fi
    exit 1
}

function info() {
    system="$1"
    group="${system}"
    shift
    FG="1;32m"
    BG="40m"
    echo -e "[\033[${FG}\033[${BG}${system}\033[0m] $*"
}

group=ADAFRUIT

if [[ $EUID -ne 0 ]]; then
    bail "adafruit-pi-externalroot-helper must be run as root. try: sudo adafruit-pi-externalroot-helper"
fi

args=$(getopt -uo 'hvd:' -- $*)
[ $? != 0 ] && print_help
set -- $args

for i
do
    case "$i"
    in
        -h)
            print_help
            ;;
        -v)
            print_version
            ;;
        -d)
            target_drive="$2"
            echo "Target drive = ${2}"
            shift
            shift
            ;;
    esac
done

if [[ ! -e "$target_drive" ]]; then
    bail "Target drive ${target_drive} must be an existing device (use -d /dev/foo to specify)"
fi

info "externalroot" "Creating new ext4 filesystem on ${target_drive}"

# Create a new partition:
fdisk "$target_drive" <<EOF
d
n
p
1


w

EOF

export target_partition="${target_drive}1"

# Get UUID for target partition:
eval `blkid -o export "${target_partition}"`
target_partition_uuid=$UUID
echo "Target partition GUID: ${target_partition_uuid}"

# Create an actual filesystem:
mkfs -t ext4 -L rootfs "${target_partition}"

# Get UUID for target filesystem:
target_filesystem_uuid=`tune2fs -l ${target_partition} | grep 'Filesystem UUID' | awk '{print $3}'`

info "externalroot" "Mounting ${target_partition}"
mount "${target_partition}" /mnt

info "externalroot" "Copying root filesystem to ${target_partition}"
rsync -ax --progress / /mnt

info "externalroot" "Configuring boot from {$target_partition}"
cp /boot/cmdline.txt /boot/cmdline.txt.bak
sed -i "s|root=\/dev\/mmcblk0p2|root=${target_partition_uuid}|" /boot/cmdline.txt
echo "/dev/disk/by-uuid/${target_filesystem_uuid}    /   ext4    defaults,noatime  0       1" >> /mnt/etc/fstab
# Comment out old root partition in fstab:
sed -i '/mmcblk0p2/s/^/#/' /mnt/etc/fstab

echo "ok, check on the state of things"

# info "externalroot" "Unmounting ${target_drive}"
# umount "$target_drive"
